apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: Springbootproject
  title: Sonar Project Custom Action Template
  description: An example template for the scaffolder that creates a simple demo service
  tags:
    - java
    - grpc
    - sonar

spec:
  owner: user:guest
  type: service

  parameters:

    - title: Provide some simple information
      required:
        - component_id
        - owner
        - java_package_name

      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
        java_package_name:
          title: Java Package Name
          type: string
          description: Name for the java package. eg (io.backstage.blah)
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group

    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

    - title: enter github repositry name
      properties:
        repositryName:
          title: repositry name
          type: string
          description: enter repositry name
        ownerName:
          title: owner name
          type: string
          description: enter owner name
        githubToken:
          title: github token
          type: string
          description: enter github token

    - title: create project on sonarqube
      properties:
       projectName:
        title: projectName
        type: string
        description: Unique name of the project
       projectKey:
         title: projectKey
         type: string
         description: Unique name of the project
       headers:
        title: berrier token
        type: string
        description: enter your sonarqube user token

  steps:

    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
          url: ./content
          copyWithoutRender:
            - .github/workflows/*
          values:
            component_id: ${{ parameters.component_id }}
            description: ${{ parameters.description }}
            artifact_id: ${{ parameters.component_id }}
            java_package_name: ${{ parameters.java_package_name }}
            owner: ${{ parameters.owner }}
            destination: ${{ parameters.repoUrl | parseRepoUrl }}
            http_port: 8080
            projectName: ${{ parameters.projectName }}
            projectKey: ${{ parameters.projectKey }}
            barrierToken: ${{ parameters.headers }}
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: [ 'github.com' ]
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

    - id: create-sonarqube-project
      name: Create SonarQube Project
      action: api-call
      input:
        url: 'http://localhost:9000/api/projects/create'
        method: 'POST'
        params:
          project: ${{ parameters.projectKey }}
          name: ${{ parameters.projectName }}
        headers:
          Authorization: 'Bearer ${{ parameters.headers }}'

    - id: create-sonarqube-token
      name: Create SonarQube token
      action: api-call
      input:
        url: 'http://localhost:9000/api/user_tokens/generate'
        method: 'POST'
        params:
          name: ${{ parameters.projectKey }}
        headers:
          Authorization: 'Bearer ${{ parameters.headers }}'

    - id: create-github-secret-sonarhosturl
      name: Create github repositry secret of sonar host url
      action: github:repo:secret
      input:
        githubToken: ${{ parameters.githubToken }}
        repositoryOwner: ${{ parameters.ownerName }}
        repositoryName: ${{ parameters.repositryName }}
        secretName: 'SONAR_HOST_URL'
        secretValue: 'http://localhost:9000'

    - id: loggg
      name: getlog
      action: debug:log
      input:
        message: ${{ steps.create-sonarqube-token.output }}

    - id: create-github-secret
      name: Create github repositry secret
      action: github:repo:secret
      input:
        githubToken: ${{ parameters.githubToken }}
        repositoryOwner: ${{ parameters.ownerName }}
        repositoryName: ${{ parameters.repositryName }}
        secretName: 'SONAR_TOKEN'
        secretValue: ${{ steps.create-sonarqube-token.output.token }}